{"ast":null,"code":"var _jsxFileName = \"/Users/s.gollapalli/Desktop/project/b20-master-2/src/components/TaskMeter.jsx\";\nimport React from 'react';\nimport { useMeter } from 'react-aria';\n\nfunction TaskMeter(props) {\n  var label = props.label,\n      _props$showValueLabel = props.showValueLabel,\n      showValueLabel = _props$showValueLabel === void 0 ? !!label : _props$showValueLabel,\n      value = props.value,\n      _props$minValue = props.minValue,\n      minValue = _props$minValue === void 0 ? 0 : _props$minValue,\n      _props$maxValue = props.maxValue,\n      maxValue = _props$maxValue === void 0 ? 100 : _props$maxValue;\n\n  var _useMeter = useMeter(props),\n      meterProps = _useMeter.meterProps,\n      labelProps = _useMeter.labelProps; // Calculate the width of the progress bar as a percentage\n\n\n  var percentage = (value - minValue) / (maxValue - minValue);\n  var barWidth = \"\".concat(Math.round(percentage * 100), \"%\");\n  return /*#__PURE__*/React.createElement(\"div\", Object.assign({}, meterProps, {\n    style: {\n      width: 200\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: 'flex',\n      justifyContent: 'space-between'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 11\n    }\n  }, label && /*#__PURE__*/React.createElement(\"span\", Object.assign({}, labelProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 17\n    }\n  }), label), showValueLabel && /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 17\n    }\n  }, meterProps['aria-valuetext'])), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      height: 10,\n      background: 'lightgray'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      width: barWidth,\n      height: 10,\n      background: 'green'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }\n  })));\n}\n\n/*#__PURE__*/\nReact.createElement(TaskMeter, {\n  label: \"Storage space\",\n  value: 25,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }\n});\nexport default TaskMeter;","map":{"version":3,"names":["React","useMeter","TaskMeter","props","label","showValueLabel","value","minValue","maxValue","meterProps","labelProps","percentage","barWidth","Math","round","width","display","justifyContent","height","background"],"sources":["/Users/s.gollapalli/Desktop/project/b20-master-2/src/components/TaskMeter.jsx"],"sourcesContent":["import React from 'react';\nimport { useMeter } from 'react-aria';\n\nfunction TaskMeter(props) {\n\n    let {\n        label,\n        showValueLabel = !!label,\n        value,\n        minValue = 0,\n        maxValue = 100\n      } = props;\n      let {\n        meterProps,\n        labelProps\n      } = useMeter(props);\n    \n      // Calculate the width of the progress bar as a percentage\n      let percentage = (value - minValue) / (maxValue - minValue);\n      let barWidth = `${Math.round(percentage * 100)}%`;\n    \n      return (\n        <div {...meterProps} style={{ width: 200 }}>\n          <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n            {label &&\n              (\n                <span {...labelProps}>\n                  {label}\n                </span>\n              )}\n            {showValueLabel &&\n              (\n                <span>\n                  {meterProps['aria-valuetext']}\n                </span>\n              )}\n          </div>\n          <div style={{ height: 10, background: 'lightgray' }}>\n            <div style={{ width: barWidth, height: 10, background: 'green' }} />\n          </div>\n        </div>\n      );\n    }\n    \n    <TaskMeter\n      label=\"Storage space\"\n      value={25}\n    />\n\n\nexport default TaskMeter;\n"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,YAAzB;;AAEA,SAASC,SAAT,CAAmBC,KAAnB,EAA0B;EAAA,IAGlBC,KAHkB,GAQhBD,KARgB,CAGlBC,KAHkB;EAAA,4BAQhBD,KARgB,CAIlBE,cAJkB;EAAA,IAIlBA,cAJkB,sCAID,CAAC,CAACD,KAJD;EAAA,IAKlBE,KALkB,GAQhBH,KARgB,CAKlBG,KALkB;EAAA,sBAQhBH,KARgB,CAMlBI,QANkB;EAAA,IAMlBA,QANkB,gCAMP,CANO;EAAA,sBAQhBJ,KARgB,CAOlBK,QAPkB;EAAA,IAOlBA,QAPkB,gCAOP,GAPO;;EAAA,gBAYhBP,QAAQ,CAACE,KAAD,CAZQ;EAAA,IAUlBM,UAVkB,aAUlBA,UAVkB;EAAA,IAWlBC,UAXkB,aAWlBA,UAXkB,EAcpB;;;EACA,IAAIC,UAAU,GAAG,CAACL,KAAK,GAAGC,QAAT,KAAsBC,QAAQ,GAAGD,QAAjC,CAAjB;EACA,IAAIK,QAAQ,aAAMC,IAAI,CAACC,KAAL,CAAWH,UAAU,GAAG,GAAxB,CAAN,MAAZ;EAEA,oBACE,6CAASF,UAAT;IAAqB,KAAK,EAAE;MAAEM,KAAK,EAAE;IAAT,CAA5B;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,iBACE;IAAK,KAAK,EAAE;MAAEC,OAAO,EAAE,MAAX;MAAmBC,cAAc,EAAE;IAAnC,CAAZ;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GACGb,KAAK,iBAEF,8CAAUM,UAAV;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,IACGN,KADH,CAHN,EAOGC,cAAc,iBAEX;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GACGI,UAAU,CAAC,gBAAD,CADb,CATN,CADF,eAeE;IAAK,KAAK,EAAE;MAAES,MAAM,EAAE,EAAV;MAAcC,UAAU,EAAE;IAA1B,CAAZ;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBACE;IAAK,KAAK,EAAE;MAAEJ,KAAK,EAAEH,QAAT;MAAmBM,MAAM,EAAE,EAA3B;MAA+BC,UAAU,EAAE;IAA3C,CAAZ;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EADF,CAfF,CADF;AAqBD;;AAED;AAAA,oBAAC,SAAD;EACE,KAAK,EAAC,eADR;EAEE,KAAK,EAAE,EAFT;EAAA;EAAA;IAAA;IAAA;IAAA;EAAA;AAAA;AAMJ,eAAejB,SAAf"},"metadata":{},"sourceType":"module"}