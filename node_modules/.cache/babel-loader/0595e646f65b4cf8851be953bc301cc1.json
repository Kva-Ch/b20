{"ast":null,"code":"import _slicedToArray from \"/Users/s.gollapalli/Desktop/project/b20-master-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useCallback, useEffect, useMemo, useRef, useState } from \"react\";\nimport formatDate from \"date-fns/format\";\nimport { range } from \"./range\";\nimport { compileDateString, parseDateString } from \"./date-string\";\nvar DEFAULT_FIRST_YEAR = 2000;\n\nfunction parseSelectValue(value) {\n  return parseInt(value);\n}\n\nfunction convertToSelectValue(value) {\n  return value.toString();\n}\n\nfunction compileDefaultDate(opts) {\n  var now = new Date();\n  var defaultYear = null;\n\n  if (opts.defaultYear != null) {\n    if (opts.defaultYear === \"now\") {\n      defaultYear = now.getFullYear();\n    } else if (typeof opts.defaultYear === \"number\") {\n      defaultYear = opts.defaultYear;\n    }\n  }\n\n  var defaultMonth = null;\n\n  if (opts.defaultMonth != null) {\n    if (opts.defaultMonth === \"now\") {\n      defaultMonth = now.getMonth() + 1;\n    } else if (typeof opts.defaultMonth === \"number\") {\n      defaultMonth = opts.defaultMonth;\n    }\n  }\n\n  var defaultDay = null;\n\n  if (opts.defaultDay != null) {\n    if (opts.defaultDay === \"now\") {\n      defaultDay = now.getDate();\n    } else if (typeof opts.defaultDay === \"number\") {\n      defaultDay = opts.defaultDay;\n    }\n  }\n\n  return {\n    defaultYear: defaultYear,\n    defaultMonth: defaultMonth,\n    defaultDay: defaultDay\n  };\n}\n\nexport var useDateSelect = function useDateSelect(value, onChange) {\n  var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n  var _useState = useState(function () {\n    var _compileDefaultDate = compileDefaultDate(opts),\n        defaultYear = _compileDefaultDate.defaultYear,\n        defaultMonth = _compileDefaultDate.defaultMonth,\n        defaultDay = _compileDefaultDate.defaultDay;\n\n    return {\n      yearValue: defaultYear ? convertToSelectValue(defaultYear) : \"\",\n      monthValue: defaultMonth ? convertToSelectValue(defaultMonth) : \"\",\n      dayValue: defaultDay ? convertToSelectValue(defaultDay) : \"\",\n      dateString: null,\n      changeCount: 0 // HACK: Use this state as a dependency of the `useEffect` below so that `onChange` is called only when it should be.\n\n    };\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      state = _useState2[0],\n      setState = _useState2[1];\n\n  var updateDate = useCallback(function (_ref) {\n    var year = _ref.year,\n        month = _ref.month,\n        day = _ref.day;\n    setState(function (curState) {\n      var yearValue = year !== null && year !== void 0 ? year : curState.yearValue;\n      var monthValue = month !== null && month !== void 0 ? month : curState.monthValue;\n      var dayValue = day !== null && day !== void 0 ? day : curState.dayValue;\n      var dateString = compileDateString(parseSelectValue(yearValue), parseSelectValue(monthValue), parseSelectValue(dayValue));\n      return {\n        yearValue: yearValue,\n        monthValue: monthValue,\n        dayValue: dayValue,\n        dateString: dateString,\n        changeCount: curState.changeCount + 1 // `updateDate` changes `state.changeCount` so that `onChange` is triggered.\n\n      };\n    });\n  }, []);\n  var setDate = useCallback(function (dateString) {\n    var _parseDateString = parseDateString(dateString),\n        year = _parseDateString.year,\n        month = _parseDateString.month,\n        day = _parseDateString.day;\n\n    setState(function (curState) {\n      return {\n        yearValue: year,\n        monthValue: month,\n        dayValue: day,\n        dateString: dateString,\n        changeCount: curState.changeCount // This method does not update `state.changeCount` so that `onChange` is not triggered.\n\n      };\n    });\n  }, []); // Sync from the state to the upper component through onChange when necessary.\n\n  var mountedRef = useRef(false);\n  useEffect(function () {\n    if (!mountedRef.current) {\n      return;\n    }\n\n    onChange(state.dateString || \"\");\n  }, [state.changeCount]);\n  useEffect(function () {\n    mountedRef.current = true;\n    return function () {\n      mountedRef.current = false;\n    };\n  }, []); // Sync from the passed value to the state when necessary.\n\n  useEffect(function () {\n    if (typeof value !== \"string\") {\n      return;\n    }\n\n    var dateValueAsString = state.dateString || \"\";\n\n    if (dateValueAsString !== value) {\n      setDate(value);\n    }\n  }, [setDate, value]); // Generate year, month, and day arrays based on locale and specified formats\n\n  var locale = opts.locale;\n  var yearFormat = opts.yearFormat;\n  var rawYearOptions = useMemo(function () {\n    var firstYear = opts.firstYear != null ? opts.firstYear : DEFAULT_FIRST_YEAR;\n    var lastYear = opts.lastYear != null ? opts.lastYear : new Date().getFullYear();\n    return range(firstYear, lastYear).map(function (i) {\n      var label = yearFormat ? formatDate(new Date(i, 0, 1), yearFormat, {\n        locale: locale\n      }) : i.toString();\n      return {\n        value: convertToSelectValue(i),\n        label: label\n      };\n    });\n  }, [opts.firstYear, opts.lastYear, locale, yearFormat]);\n  var monthFormat = opts.monthFormat;\n  var monthOptions = useMemo(function () {\n    return range(1, 12).map(function (i) {\n      var label = monthFormat ? formatDate(new Date(1960, i - 1), monthFormat, {\n        locale: locale\n      }) : i.toString();\n      return {\n        label: label,\n        value: convertToSelectValue(i)\n      };\n    });\n  }, [locale, monthFormat]);\n  var dayFormat = opts.dayFormat;\n  var dayOptions = useMemo(function () {\n    return range(1, 31).map(function (i) {\n      var label = dayFormat ? formatDate(new Date(1960, 0, i), dayFormat, {\n        locale: locale\n      }) : i.toString();\n      return {\n        label: label,\n        value: convertToSelectValue(i)\n      };\n    });\n  }, [locale, dayFormat]); // If `state.yearValue` is not included in the year options, add it.\n\n  var yearOptions = useMemo(function () {\n    if (state.yearValue !== \"\" && !rawYearOptions.some(function (o) {\n      return o.value === state.yearValue;\n    })) {\n      var label;\n\n      try {\n        label = yearFormat ? formatDate(new Date(parseSelectValue(state.yearValue), 0, 1), yearFormat, {\n          locale: locale\n        }) : state.yearValue;\n      } catch (_a) {\n        label = state.yearValue;\n      }\n\n      return rawYearOptions.concat({\n        label: label,\n        value: state.yearValue\n      });\n    }\n\n    return rawYearOptions;\n  }, [state.yearValue, rawYearOptions]);\n  return {\n    yearValue: state.yearValue,\n    monthValue: state.monthValue,\n    dayValue: state.dayValue,\n    yearOptions: yearOptions,\n    monthOptions: monthOptions,\n    dayOptions: dayOptions,\n    onYearChange: useCallback(function (e) {\n      var value = typeof e === \"string\" ? e : e.target.value;\n      updateDate({\n        year: value\n      });\n    }, [updateDate]),\n    onMonthChange: useCallback(function (e) {\n      var value = typeof e === \"string\" ? e : e.target.value;\n      updateDate({\n        month: value\n      });\n    }, [updateDate]),\n    onDayChange: useCallback(function (e) {\n      var value = typeof e === \"string\" ? e : e.target.value;\n      updateDate({\n        day: value\n      });\n    }, [updateDate]),\n    dateValue: state.dateString,\n    onDateChange: useCallback(function (e) {\n      var value = typeof e === \"string\" ? e : e.target.value;\n\n      var _parseDateString2 = parseDateString(value),\n          year = _parseDateString2.year,\n          month = _parseDateString2.month,\n          day = _parseDateString2.day;\n\n      updateDate({\n        year: year,\n        month: month,\n        day: day\n      });\n    }, [updateDate]),\n    setDate: setDate\n  };\n};","map":null,"metadata":{},"sourceType":"module"}