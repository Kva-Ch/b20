{"ast":null,"code":"var _jsxFileName = \"/Users/k.chaganti/Desktop/b20/b20/src/components/TaskMeter.jsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useMeter } from 'react-aria';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction TaskMeter(props) {\n  _s();\n\n  let {\n    label,\n    showValueLabel = !!label,\n    value,\n    minValue = 0,\n    maxValue = 100\n  } = props;\n  let {\n    meterProps,\n    labelProps\n  } = useMeter(props); // Calculate the width of the progress bar as a percentage\n\n  let percentage = (value - minValue) / (maxValue - minValue);\n  let barWidth = `${Math.round(percentage * 100)}%`;\n  return /*#__PURE__*/_jsxDEV(\"div\", { ...meterProps,\n    style: {\n      width: 200\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        justifyContent: 'space-between'\n      },\n      children: [label && /*#__PURE__*/_jsxDEV(\"span\", { ...labelProps,\n        children: label\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 17\n      }, this), showValueLabel && /*#__PURE__*/_jsxDEV(\"span\", {\n        children: meterProps['aria-valuetext']\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        height: 10,\n        background: 'lightgray'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: barWidth,\n          height: 10,\n          background: 'green'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 9\n  }, this);\n}\n\n_s(TaskMeter, \"8Al4c6pAMeeFf2a+4OBzEcdDcb8=\", false, function () {\n  return [useMeter];\n});\n\n_c = TaskMeter;\n\n/*#__PURE__*/\n_jsxDEV(TaskMeter, {\n  label: \"Storage space\",\n  value: 25\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 45,\n  columnNumber: 5\n}, this);\n\nexport default TaskMeter;\n\nvar _c;\n\n$RefreshReg$(_c, \"TaskMeter\");","map":{"version":3,"names":["React","useMeter","TaskMeter","props","label","showValueLabel","value","minValue","maxValue","meterProps","labelProps","percentage","barWidth","Math","round","width","display","justifyContent","height","background"],"sources":["/Users/k.chaganti/Desktop/b20/b20/src/components/TaskMeter.jsx"],"sourcesContent":["import React from 'react';\nimport { useMeter } from 'react-aria';\n\nfunction TaskMeter(props) {\n\n    let {\n        label,\n        showValueLabel = !!label,\n        value,\n        minValue = 0,\n        maxValue = 100\n      } = props;\n      let {\n        meterProps,\n        labelProps\n      } = useMeter(props);\n    \n      // Calculate the width of the progress bar as a percentage\n      let percentage = (value - minValue) / (maxValue - minValue);\n      let barWidth = `${Math.round(percentage * 100)}%`;\n    \n      return (\n        <div {...meterProps} style={{ width: 200 }}>\n          <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n            {label &&\n              (\n                <span {...labelProps}>\n                  {label}\n                </span>\n              )}\n            {showValueLabel &&\n              (\n                <span>\n                  {meterProps['aria-valuetext']}\n                </span>\n              )}\n          </div>\n          <div style={{ height: 10, background: 'lightgray' }}>\n            <div style={{ width: barWidth, height: 10, background: 'green' }} />\n          </div>\n        </div>\n      );\n    }\n    \n    <TaskMeter\n      label=\"Storage space\"\n      value={25}\n    />\n\n\n\nexport default TaskMeter;\n"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,YAAzB;;;AAEA,SAASC,SAAT,CAAmBC,KAAnB,EAA0B;EAAA;;EAEtB,IAAI;IACAC,KADA;IAEAC,cAAc,GAAG,CAAC,CAACD,KAFnB;IAGAE,KAHA;IAIAC,QAAQ,GAAG,CAJX;IAKAC,QAAQ,GAAG;EALX,IAMEL,KANN;EAOE,IAAI;IACFM,UADE;IAEFC;EAFE,IAGAT,QAAQ,CAACE,KAAD,CAHZ,CAToB,CAcpB;;EACA,IAAIQ,UAAU,GAAG,CAACL,KAAK,GAAGC,QAAT,KAAsBC,QAAQ,GAAGD,QAAjC,CAAjB;EACA,IAAIK,QAAQ,GAAI,GAAEC,IAAI,CAACC,KAAL,CAAWH,UAAU,GAAG,GAAxB,CAA6B,GAA/C;EAEA,oBACE,oBAASF,UAAT;IAAqB,KAAK,EAAE;MAAEM,KAAK,EAAE;IAAT,CAA5B;IAAA,wBACE;MAAK,KAAK,EAAE;QAAEC,OAAO,EAAE,MAAX;QAAmBC,cAAc,EAAE;MAAnC,CAAZ;MAAA,WACGb,KAAK,iBAEF,qBAAUM,UAAV;QAAA,UACGN;MADH;QAAA;QAAA;QAAA;MAAA,QAHN,EAOGC,cAAc,iBAEX;QAAA,UACGI,UAAU,CAAC,gBAAD;MADb;QAAA;QAAA;QAAA;MAAA,QATN;IAAA;MAAA;MAAA;MAAA;IAAA,QADF,eAeE;MAAK,KAAK,EAAE;QAAES,MAAM,EAAE,EAAV;QAAcC,UAAU,EAAE;MAA1B,CAAZ;MAAA,uBACE;QAAK,KAAK,EAAE;UAAEJ,KAAK,EAAEH,QAAT;UAAmBM,MAAM,EAAE,EAA3B;UAA+BC,UAAU,EAAE;QAA3C;MAAZ;QAAA;QAAA;QAAA;MAAA;IADF;MAAA;MAAA;MAAA;IAAA,QAfF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAqBD;;GAvCIjB,S;UAYCD,Q;;;KAZDC,S;;AAyCL;AAAA,QAAC,SAAD;EACE,KAAK,EAAC,eADR;EAEE,KAAK,EAAE;AAFT;EAAA;EAAA;EAAA;AAAA;;AAOJ,eAAeA,SAAf"},"metadata":{},"sourceType":"module"}