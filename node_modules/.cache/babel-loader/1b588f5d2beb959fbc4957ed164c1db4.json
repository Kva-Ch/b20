{"ast":null,"code":"import _objectSpread from \"/Users/s.gollapalli/Desktop/project/b20-master-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { filterDOMProps as $frWMC$filterDOMProps, useId as $frWMC$useId, mergeProps as $frWMC$mergeProps, useSlotId as $frWMC$useSlotId, isMac as $frWMC$isMac, isWebKit as $frWMC$isWebKit } from \"@react-aria/utils\";\nimport { useFocusWithin as $frWMC$useFocusWithin, useHover as $frWMC$useHover, isFocusVisible as $frWMC$isFocusVisible } from \"@react-aria/interactions\";\nimport { useLabel as $frWMC$useLabel } from \"@react-aria/label\";\nimport { useSelectableList as $frWMC$useSelectableList, useSelectableItem as $frWMC$useSelectableItem } from \"@react-aria/selection\";\nimport { getItemCount as $frWMC$getItemCount } from \"@react-stately/collections\";\nvar $b1f0cad8af73213b$export$3585ede4d035bf14 = new WeakMap();\n\nfunction $b1f0cad8af73213b$var$normalizeKey(key) {\n  if (typeof key === 'string') return key.replace(/\\s*/g, '');\n  return '' + key;\n}\n\nfunction $b1f0cad8af73213b$export$9145995848b05025(state, itemKey) {\n  var data = $b1f0cad8af73213b$export$3585ede4d035bf14.get(state);\n  if (!data) throw new Error('Unknown list');\n  return \"\".concat(data.id, \"-option-\").concat($b1f0cad8af73213b$var$normalizeKey(itemKey));\n}\n\nfunction $c132121280ec012d$export$50eacbbf140a3141(props, state, ref) {\n  var domProps = $frWMC$filterDOMProps(props, {\n    labelable: true\n  });\n\n  var _$frWMC$useSelectable = $frWMC$useSelectableList(_objectSpread({}, props, {\n    ref: ref,\n    selectionManager: state.selectionManager,\n    collection: state.collection,\n    disabledKeys: state.disabledKeys\n  })),\n      listProps = _$frWMC$useSelectable.listProps;\n\n  var _$frWMC$useFocusWithi = $frWMC$useFocusWithin({\n    onFocusWithin: props.onFocus,\n    onBlurWithin: props.onBlur,\n    onFocusWithinChange: props.onFocusChange\n  }),\n      focusWithinProps = _$frWMC$useFocusWithi.focusWithinProps; // Share list id and some props with child options.\n\n\n  var id = $frWMC$useId(props.id);\n  $b1f0cad8af73213b$export$3585ede4d035bf14.set(state, {\n    id: id,\n    shouldUseVirtualFocus: props.shouldUseVirtualFocus,\n    shouldSelectOnPressUp: props.shouldSelectOnPressUp,\n    shouldFocusOnHover: props.shouldFocusOnHover,\n    isVirtualized: props.isVirtualized\n  });\n\n  var _$frWMC$useLabel = $frWMC$useLabel(_objectSpread({}, props, {\n    id: id,\n    // listbox is not an HTML input element so it\n    // shouldn't be labeled by a <label> element.\n    labelElementType: 'span'\n  })),\n      labelProps = _$frWMC$useLabel.labelProps,\n      fieldProps = _$frWMC$useLabel.fieldProps;\n\n  return {\n    labelProps: labelProps,\n    listBoxProps: $frWMC$mergeProps(domProps, focusWithinProps, state.selectionManager.selectionMode === 'multiple' ? {\n      'aria-multiselectable': 'true'\n    } : {}, _objectSpread({\n      role: 'listbox'\n    }, $frWMC$mergeProps(fieldProps, listProps)))\n  };\n}\n\nfunction $293f70390ea03370$export$497855f14858aa34(props, state, ref) {\n  var key = props.key;\n  var data = $b1f0cad8af73213b$export$3585ede4d035bf14.get(state);\n\n  var _isDisabled;\n\n  var isDisabled = (_isDisabled = props.isDisabled) !== null && _isDisabled !== void 0 ? _isDisabled : state.disabledKeys.has(key);\n\n  var _isSelected;\n\n  var isSelected = (_isSelected = props.isSelected) !== null && _isSelected !== void 0 ? _isSelected : state.selectionManager.isSelected(key);\n  var isFocused = state.selectionManager.focusedKey === key;\n\n  var _shouldSelectOnPressUp;\n\n  var shouldSelectOnPressUp = (_shouldSelectOnPressUp = props.shouldSelectOnPressUp) !== null && _shouldSelectOnPressUp !== void 0 ? _shouldSelectOnPressUp : data.shouldSelectOnPressUp;\n\n  var _shouldFocusOnHover;\n\n  var shouldFocusOnHover = (_shouldFocusOnHover = props.shouldFocusOnHover) !== null && _shouldFocusOnHover !== void 0 ? _shouldFocusOnHover : data.shouldFocusOnHover;\n\n  var _shouldUseVirtualFocus;\n\n  var shouldUseVirtualFocus = (_shouldUseVirtualFocus = props.shouldUseVirtualFocus) !== null && _shouldUseVirtualFocus !== void 0 ? _shouldUseVirtualFocus : data.shouldUseVirtualFocus;\n\n  var _isVirtualized;\n\n  var isVirtualized = (_isVirtualized = props.isVirtualized) !== null && _isVirtualized !== void 0 ? _isVirtualized : data.isVirtualized;\n  var labelId = $frWMC$useSlotId();\n  var descriptionId = $frWMC$useSlotId();\n  var optionProps = {\n    role: 'option',\n    'aria-disabled': isDisabled,\n    'aria-selected': state.selectionManager.selectionMode !== 'none' ? isSelected : undefined\n  }; // Safari with VoiceOver on macOS misreads options with aria-labelledby or aria-label as simply \"text\".\n  // We should not map slots to the label and description on Safari and instead just have VoiceOver read the textContent.\n  // https://bugs.webkit.org/show_bug.cgi?id=209279\n\n  if (!($frWMC$isMac() && $frWMC$isWebKit())) {\n    optionProps['aria-label'] = props['aria-label'];\n    optionProps['aria-labelledby'] = labelId;\n    optionProps['aria-describedby'] = descriptionId;\n  }\n\n  if (isVirtualized) {\n    optionProps['aria-posinset'] = state.collection.getItem(key).index + 1;\n    optionProps['aria-setsize'] = $frWMC$getItemCount(state.collection);\n  }\n\n  var _$frWMC$useSelectable2 = $frWMC$useSelectableItem({\n    selectionManager: state.selectionManager,\n    key: key,\n    ref: ref,\n    shouldSelectOnPressUp: shouldSelectOnPressUp,\n    allowsDifferentPressOrigin: shouldSelectOnPressUp,\n    isVirtualized: isVirtualized,\n    shouldUseVirtualFocus: shouldUseVirtualFocus,\n    isDisabled: isDisabled\n  }),\n      itemProps = _$frWMC$useSelectable2.itemProps,\n      isPressed = _$frWMC$useSelectable2.isPressed;\n\n  var _$frWMC$useHover = $frWMC$useHover({\n    isDisabled: isDisabled || !shouldFocusOnHover,\n    onHoverStart: function onHoverStart() {\n      if (!$frWMC$isFocusVisible()) {\n        state.selectionManager.setFocused(true);\n        state.selectionManager.setFocusedKey(key);\n      }\n    }\n  }),\n      hoverProps = _$frWMC$useHover.hoverProps;\n\n  return {\n    optionProps: _objectSpread({}, optionProps, $frWMC$mergeProps(itemProps, hoverProps), {\n      id: $b1f0cad8af73213b$export$9145995848b05025(state, key)\n    }),\n    labelProps: {\n      id: labelId\n    },\n    descriptionProps: {\n      id: descriptionId\n    },\n    isFocused: isFocused,\n    isSelected: isSelected,\n    isDisabled: isDisabled,\n    isPressed: isPressed\n  };\n}\n\nfunction $af383d3bef1cfdc9$export$c3f9f39876e4bc7(props) {\n  var heading = props.heading,\n      ariaLabel = props['aria-label'];\n  var headingId = $frWMC$useId();\n  return {\n    itemProps: {\n      role: 'presentation'\n    },\n    headingProps: heading ? {\n      // Techincally, listbox cannot contain headings according to ARIA.\n      // We hide the heading from assistive technology, and only use it\n      // as a label for the nested group.\n      id: headingId,\n      'aria-hidden': true\n    } : {},\n    groupProps: {\n      role: 'group',\n      'aria-label': ariaLabel,\n      'aria-labelledby': heading ? headingId : undefined\n    }\n  };\n}\n\nexport { $c132121280ec012d$export$50eacbbf140a3141 as useListBox, $293f70390ea03370$export$497855f14858aa34 as useOption, $af383d3bef1cfdc9$export$c3f9f39876e4bc7 as useListBoxSection, $b1f0cad8af73213b$export$3585ede4d035bf14 as listData, $b1f0cad8af73213b$export$9145995848b05025 as getItemId };","map":null,"metadata":{},"sourceType":"module"}