{"ast":null,"code":"import _objectSpread from \"/Users/s.gollapalli/Desktop/project/b20-master-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { mergeProps as $7CUUz$mergeProps, filterDOMProps as $7CUUz$filterDOMProps } from \"@react-aria/utils\";\nimport { useFocusable as $7CUUz$useFocusable } from \"@react-aria/focus\";\nimport { usePress as $7CUUz$usePress } from \"@react-aria/interactions\";\n\nfunction $d2c8e2b0480f3f34$export$cbe85ee05b554577(props, state, ref) {\n  var _props$isDisabled = props.isDisabled,\n      isDisabled = _props$isDisabled === void 0 ? false : _props$isDisabled,\n      isRequired = props.isRequired,\n      isReadOnly = props.isReadOnly,\n      value = props.value,\n      name = props.name,\n      children = props.children,\n      ariaLabel = props['aria-label'],\n      ariaLabelledby = props['aria-labelledby'],\n      _props$validationStat = props.validationState,\n      validationState = _props$validationStat === void 0 ? 'valid' : _props$validationStat;\n\n  var onChange = function onChange(e) {\n    // since we spread props on label, onChange will end up there as well as in here.\n    // so we have to stop propagation at the lowest level that we care about\n    e.stopPropagation();\n    state.setSelected(e.target.checked);\n  };\n\n  var hasChildren = children != null;\n  var hasAriaLabel = ariaLabel != null || ariaLabelledby != null;\n  if (!hasChildren && !hasAriaLabel) console.warn('If you do not provide children, you must specify an aria-label for accessibility'); // This handles focusing the input on pointer down, which Safari does not do by default.\n\n  var _$7CUUz$usePress = $7CUUz$usePress({\n    isDisabled: isDisabled\n  }),\n      pressProps = _$7CUUz$usePress.pressProps;\n\n  var _$7CUUz$useFocusable = $7CUUz$useFocusable(props, ref),\n      focusableProps = _$7CUUz$useFocusable.focusableProps;\n\n  var interactions = $7CUUz$mergeProps(pressProps, focusableProps);\n  var domProps = $7CUUz$filterDOMProps(props, {\n    labelable: true\n  });\n  return {\n    inputProps: $7CUUz$mergeProps(domProps, _objectSpread({\n      'aria-invalid': validationState === 'invalid' || undefined,\n      'aria-errormessage': props['aria-errormessage'],\n      'aria-controls': props['aria-controls'],\n      'aria-readonly': isReadOnly || undefined,\n      'aria-required': isRequired || undefined,\n      onChange: onChange,\n      disabled: isDisabled,\n      value: value,\n      name: name,\n      type: 'checkbox'\n    }, interactions))\n  };\n}\n\nexport { $d2c8e2b0480f3f34$export$cbe85ee05b554577 as useToggle };","map":null,"metadata":{},"sourceType":"module"}