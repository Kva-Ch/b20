{"ast":null,"code":"import { filterDOMProps as $e3Dei$filterDOMProps, clamp as $e3Dei$clamp, mergeProps as $e3Dei$mergeProps } from \"@react-aria/utils\";\nimport { useLabel as $e3Dei$useLabel } from \"@react-aria/label\";\nimport { useNumberFormatter as $e3Dei$useNumberFormatter } from \"@react-aria/i18n\";\n\nfunction $204d9ebcedfb8806$export$ed5abd763a836edc(props) {\n  let {\n    value = 0,\n    minValue = 0,\n    maxValue = 100,\n    valueLabel: valueLabel,\n    isIndeterminate: isIndeterminate,\n    formatOptions = {\n      style: 'percent'\n    }\n  } = props;\n  let domProps = $e3Dei$filterDOMProps(props, {\n    labelable: true\n  });\n  let {\n    labelProps: labelProps,\n    fieldProps: fieldProps\n  } = $e3Dei$useLabel({ ...props,\n    // Progress bar is not an HTML input element so it\n    // shouldn't be labeled by a <label> element.\n    labelElementType: 'span'\n  });\n  value = $e3Dei$clamp(value, minValue, maxValue);\n  let percentage = (value - minValue) / (maxValue - minValue);\n  let formatter = $e3Dei$useNumberFormatter(formatOptions);\n\n  if (!isIndeterminate && !valueLabel) {\n    let valueToFormat = formatOptions.style === 'percent' ? percentage : value;\n    valueLabel = formatter.format(valueToFormat);\n  }\n\n  return {\n    progressBarProps: $e3Dei$mergeProps(domProps, { ...fieldProps,\n      'aria-valuenow': isIndeterminate ? undefined : value,\n      'aria-valuemin': minValue,\n      'aria-valuemax': maxValue,\n      'aria-valuetext': isIndeterminate ? undefined : valueLabel,\n      role: 'progressbar'\n    }),\n    labelProps: labelProps\n  };\n}\n\nexport { $204d9ebcedfb8806$export$ed5abd763a836edc as useProgressBar };","map":{"version":3,"mappings":";;;;SA8BgBA,0CAAeC,OAA8C;EAC3E,IAAI;IACFC,KAAK,GAAG,CADN;IAEFC,QAAQ,GAAG,CAFT;IAGFC,QAAQ,GAAG,GAHT;IAGYC,YACdA,UAJE;IAIQC,iBACVA,eALE;IAMFC,aAAa,GAAG;MACdC,KAAK,EAAE;IADO;EANd,IASAP,KATJ;EAWA,IAAIQ,QAAQ,GAAGC,qBAAc,CAACT,KAAD,EAAQ;IAACU,SAAS,EAAE;EAAZ,CAAR,CAA7B;EACA,IAAI;IAACC,sBAAD;IAAWC,YAAEA;EAAb,IAA2BC,eAAQ,CAAC,KACnCb,KADmC;IAEtC;IACA;IACAc,gBAAgB,EAAE;EAJoB,CAAD,CAAvC;EAOAb,KAAK,GAAGc,YAAK,CAACd,KAAD,EAAQC,QAAR,EAAkBC,QAAlB,CAAb;EACA,IAAIa,UAAU,IAAIf,KAAK,GAAGC,QAAZ,KAAyBC,QAAQ,GAAGD,QAApC,CAAd;EACA,IAAIe,SAAS,GAAGC,yBAAkB,CAACZ,aAAD,CAAlC;;EAEA,IAAE,CAAGD,eAAH,IAAkB,CAAKD,UAAzB,EAAqC;IACnC,IAAIe,aAAa,GAAGb,aAAa,CAACC,KAAd,KAAwB,SAAxB,GAAoCS,UAApC,GAAiDf,KAArE;IACAG,UAAU,GAAGa,SAAS,CAACG,MAAV,CAAiBD,aAAjB,CAAb;EACD;;EAED,OAAO;IACLE,gBAAgB,EAAEC,iBAAU,CAACd,QAAD,EAAW,KAClCI,UADkC;MAErC,iBAAiBP,eAAe,GAAGkB,SAAH,GAAetB,KAFV;MAGrC,iBAAiBC,QAHoB;MAIrC,iBAAiBC,QAJoB;MAKrC,kBAAkBE,eAAe,GAAGkB,SAAH,GAAenB,UALX;MAMrCoB,IAAI,EAAE;IAN+B,CAAX,CADvB;gBASLb;EATK,CAAP;AAWD","names":["$204d9ebcedfb8806$export$ed5abd763a836edc","props","value","minValue","maxValue","valueLabel","isIndeterminate","formatOptions","style","domProps","$e3Dei$filterDOMProps","labelable","labelProps","fieldProps","$e3Dei$useLabel","labelElementType","$e3Dei$clamp","percentage","formatter","$e3Dei$useNumberFormatter","valueToFormat","format","progressBarProps","$e3Dei$mergeProps","undefined","role"],"sources":["/Users/k.chaganti/Desktop/b20/b20/node_modules/@react-aria/progress/dist/packages/@react-aria/progress/src/useProgressBar.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaProgressBarProps} from '@react-types/progress';\nimport {clamp, filterDOMProps, mergeProps} from '@react-aria/utils';\nimport {DOMAttributes} from '@react-types/shared';\nimport {useLabel} from '@react-aria/label';\nimport {useNumberFormatter} from '@react-aria/i18n';\n\nexport interface ProgressBarAria {\n  /** Props for the progress bar container element. */\n  progressBarProps: DOMAttributes,\n  /** Props for the progress bar's visual label element (if any). */\n  labelProps: DOMAttributes\n}\n\n/**\n * Provides the accessibility implementation for a progress bar component.\n * Progress bars show either determinate or indeterminate progress of an operation\n * over time.\n */\nexport function useProgressBar(props: AriaProgressBarProps): ProgressBarAria {\n  let {\n    value = 0,\n    minValue = 0,\n    maxValue = 100,\n    valueLabel,\n    isIndeterminate,\n    formatOptions = {\n      style: 'percent'\n    }\n  } = props;\n\n  let domProps = filterDOMProps(props, {labelable: true});\n  let {labelProps, fieldProps} = useLabel({\n    ...props,\n    // Progress bar is not an HTML input element so it\n    // shouldn't be labeled by a <label> element.\n    labelElementType: 'span'\n  });\n\n  value = clamp(value, minValue, maxValue);\n  let percentage = (value - minValue) / (maxValue - minValue);\n  let formatter = useNumberFormatter(formatOptions);\n\n  if (!isIndeterminate && !valueLabel) {\n    let valueToFormat = formatOptions.style === 'percent' ? percentage : value;\n    valueLabel = formatter.format(valueToFormat);\n  }\n\n  return {\n    progressBarProps: mergeProps(domProps, {\n      ...fieldProps,\n      'aria-valuenow': isIndeterminate ? undefined : value,\n      'aria-valuemin': minValue,\n      'aria-valuemax': maxValue,\n      'aria-valuetext': isIndeterminate ? undefined : valueLabel as string,\n      role: 'progressbar'\n    }),\n    labelProps\n  };\n}\n"]},"metadata":{},"sourceType":"module"}