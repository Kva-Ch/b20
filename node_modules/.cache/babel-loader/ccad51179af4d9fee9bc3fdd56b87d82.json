{"ast":null,"code":"import _objectSpread from \"/Users/s.gollapalli/Desktop/project/b20-master-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/s.gollapalli/Desktop/project/b20-master-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/s.gollapalli/Desktop/project/b20-master-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n\nvar $5b160d28a433310d$export$c17fa47878dc55b6 = /*#__PURE__*/function () {\n  _createClass($5b160d28a433310d$export$c17fa47878dc55b6, [{\n    key: \"getStringForLocale\",\n\n    /** Returns a localized string for the given key and locale. */\n    value: function getStringForLocale(key, locale) {\n      var strings = this.strings[locale];\n\n      if (!strings) {\n        strings = $5b160d28a433310d$var$getStringsForLocale(locale, this.strings, this.defaultLocale);\n        this.strings[locale] = strings;\n      }\n\n      var string = strings[key];\n      if (!string) throw new Error(\"Could not find intl message \".concat(key, \" in \").concat(locale, \" locale\"));\n      return string;\n    }\n  }]);\n\n  function $5b160d28a433310d$export$c17fa47878dc55b6(messages) {\n    var defaultLocale = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'en-US';\n\n    _classCallCheck(this, $5b160d28a433310d$export$c17fa47878dc55b6);\n\n    // Clone messages so we don't modify the original object.\n    this.strings = _objectSpread({}, messages);\n    this.defaultLocale = defaultLocale;\n  }\n\n  return $5b160d28a433310d$export$c17fa47878dc55b6;\n}();\n\nfunction $5b160d28a433310d$var$getStringsForLocale(locale, strings) {\n  var defaultLocale = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'en-US';\n  // If there is an exact match, use it.\n  if (strings[locale]) return strings[locale]; // Attempt to find the closest match by language.\n  // For example, if the locale is fr-CA (French Canadian), but there is only\n  // an fr-FR (France) set of strings, use that.\n  // This could be replaced with Intl.LocaleMatcher once it is supported.\n  // https://github.com/tc39/proposal-intl-localematcher\n\n  var language = $5b160d28a433310d$var$getLanguage(locale);\n  if (strings[language]) return strings[language];\n\n  for (var key in strings) {\n    if (key.startsWith(language + '-')) return strings[key];\n  } // Nothing close, use english.\n\n\n  return strings[defaultLocale];\n}\n\nfunction $5b160d28a433310d$var$getLanguage(locale) {\n  // @ts-ignore\n  if (Intl.Locale) // @ts-ignore\n    return new Intl.Locale(locale).language;\n  return locale.split('-')[0];\n}\n\nvar $6db58dc88e78b024$var$pluralRulesCache = new Map();\nvar $6db58dc88e78b024$var$numberFormatCache = new Map();\n\nvar $6db58dc88e78b024$export$2f817fcdc4b89ae0 = /*#__PURE__*/function () {\n  _createClass($6db58dc88e78b024$export$2f817fcdc4b89ae0, [{\n    key: \"format\",\n\n    /** Formats a localized string for the given key with the provided variables. */\n    value: function format(key, variables) {\n      var message = this.strings.getStringForLocale(key, this.locale);\n      return typeof message === 'function' ? message(variables, this) : message;\n    }\n  }, {\n    key: \"plural\",\n    value: function plural(count, options) {\n      var type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'cardinal';\n      var opt = options['=' + count];\n      if (opt) return typeof opt === 'function' ? opt() : opt;\n      var key = this.locale + ':' + type;\n      var pluralRules = $6db58dc88e78b024$var$pluralRulesCache.get(key);\n\n      if (!pluralRules) {\n        pluralRules = new Intl.PluralRules(this.locale, {\n          type: type\n        });\n        $6db58dc88e78b024$var$pluralRulesCache.set(key, pluralRules);\n      }\n\n      var selected = pluralRules.select(count);\n      opt = options[selected] || options.other;\n      return typeof opt === 'function' ? opt() : opt;\n    }\n  }, {\n    key: \"number\",\n    value: function number(value) {\n      var numberFormat = $6db58dc88e78b024$var$numberFormatCache.get(this.locale);\n\n      if (!numberFormat) {\n        numberFormat = new Intl.NumberFormat(this.locale);\n        $6db58dc88e78b024$var$numberFormatCache.set(this.locale, numberFormat);\n      }\n\n      return numberFormat.format(value);\n    }\n  }, {\n    key: \"select\",\n    value: function select(options, value) {\n      var opt = options[value] || options.other;\n      return typeof opt === 'function' ? opt() : opt;\n    }\n  }]);\n\n  function $6db58dc88e78b024$export$2f817fcdc4b89ae0(locale, strings) {\n    _classCallCheck(this, $6db58dc88e78b024$export$2f817fcdc4b89ae0);\n\n    this.locale = locale;\n    this.strings = strings;\n  }\n\n  return $6db58dc88e78b024$export$2f817fcdc4b89ae0;\n}();\n\nexport { $5b160d28a433310d$export$c17fa47878dc55b6 as LocalizedStringDictionary, $6db58dc88e78b024$export$2f817fcdc4b89ae0 as LocalizedStringFormatter };","map":null,"metadata":{},"sourceType":"module"}