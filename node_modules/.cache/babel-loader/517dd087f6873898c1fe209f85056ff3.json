{"ast":null,"code":"import _objectSpread from \"/Users/s.gollapalli/Desktop/project/b20-master-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _toConsumableArray from \"/Users/s.gollapalli/Desktop/project/b20-master-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/s.gollapalli/Desktop/project/b20-master-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/s.gollapalli/Desktop/project/b20-master-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nvar $488c6ddbf4ef74c2$var$formatterCache = new Map();\nvar $488c6ddbf4ef74c2$var$supportsSignDisplay = false;\n\ntry {\n  // @ts-ignore\n  $488c6ddbf4ef74c2$var$supportsSignDisplay = new Intl.NumberFormat('de-DE', {\n    signDisplay: 'exceptZero'\n  }).resolvedOptions().signDisplay === 'exceptZero'; // eslint-disable-next-line no-empty\n} catch (e) {}\n\nvar $488c6ddbf4ef74c2$var$supportsUnit = false;\n\ntry {\n  // @ts-ignore\n  $488c6ddbf4ef74c2$var$supportsUnit = new Intl.NumberFormat('de-DE', {\n    style: 'unit',\n    unit: 'degree'\n  }).resolvedOptions().style === 'unit'; // eslint-disable-next-line no-empty\n} catch (e1) {} // Polyfill for units since Safari doesn't support them yet. See https://bugs.webkit.org/show_bug.cgi?id=215438.\n// Currently only polyfilling the unit degree in narrow format for ColorSlider in our supported locales.\n// Values were determined by switching to each locale manually in Chrome.\n\n\nvar $488c6ddbf4ef74c2$var$UNITS = {\n  degree: {\n    narrow: {\n      default: '°',\n      'ja-JP': ' 度',\n      'zh-TW': '度',\n      'sl-SI': ' °'\n    }\n  }\n};\n\nvar $488c6ddbf4ef74c2$export$cc77c4ff7e8673c5 = /*#__PURE__*/function () {\n  _createClass($488c6ddbf4ef74c2$export$cc77c4ff7e8673c5, [{\n    key: \"format\",\n\n    /** Formats a number value as a string, according to the locale and options provided to the constructor. */\n    value: function format(value) {\n      var res = '';\n      if (!$488c6ddbf4ef74c2$var$supportsSignDisplay && this.options.signDisplay != null) res = $488c6ddbf4ef74c2$export$711b50b3c525e0f2(this.numberFormatter, this.options.signDisplay, value);else res = this.numberFormatter.format(value);\n\n      if (this.options.style === 'unit' && !$488c6ddbf4ef74c2$var$supportsUnit) {\n        var ref;\n\n        var _this$resolvedOptions = this.resolvedOptions(),\n            unit = _this$resolvedOptions.unit,\n            _this$resolvedOptions2 = _this$resolvedOptions.unitDisplay,\n            unitDisplay = _this$resolvedOptions2 === void 0 ? 'short' : _this$resolvedOptions2,\n            locale = _this$resolvedOptions.locale;\n\n        var values = (ref = $488c6ddbf4ef74c2$var$UNITS[unit]) === null || ref === void 0 ? void 0 : ref[unitDisplay];\n        res += values[locale] || values.default;\n      }\n\n      return res;\n    }\n    /** Formats a number to an array of parts such as separators, digits, punctuation, and more. */\n\n  }, {\n    key: \"formatToParts\",\n    value: function formatToParts(value) {\n      // TODO: implement signDisplay for formatToParts\n      // @ts-ignore\n      return this.numberFormatter.formatToParts(value);\n    }\n    /** Formats a number range as a string. */\n\n  }, {\n    key: \"formatRange\",\n    value: function formatRange(start, end) {\n      // @ts-ignore\n      if (typeof this.numberFormatter.formatRange === 'function') // @ts-ignore\n        return this.numberFormatter.formatRange(start, end);\n      if (end < start) throw new RangeError('End date must be >= start date'); // Very basic fallback for old browsers.\n\n      return \"\".concat(this.format(start), \" \\u2013 \").concat(this.format(end));\n    }\n    /** Formats a number range as an array of parts. */\n\n  }, {\n    key: \"formatRangeToParts\",\n    value: function formatRangeToParts(start, end) {\n      // @ts-ignore\n      if (typeof this.numberFormatter.formatRangeToParts === 'function') // @ts-ignore\n        return this.numberFormatter.formatRangeToParts(start, end);\n      if (end < start) throw new RangeError('End date must be >= start date');\n      var startParts = this.numberFormatter.formatToParts(start);\n      var endParts = this.numberFormatter.formatToParts(end);\n      return [].concat(_toConsumableArray(startParts.map(function (p) {\n        return _objectSpread({}, p, {\n          source: 'startRange'\n        });\n      })), [{\n        type: 'literal',\n        value: ' – ',\n        source: 'shared'\n      }], _toConsumableArray(endParts.map(function (p) {\n        return _objectSpread({}, p, {\n          source: 'endRange'\n        });\n      })));\n    }\n    /** Returns the resolved formatting options based on the values passed to the constructor. */\n\n  }, {\n    key: \"resolvedOptions\",\n    value: function resolvedOptions() {\n      var options = this.numberFormatter.resolvedOptions();\n      if (!$488c6ddbf4ef74c2$var$supportsSignDisplay && this.options.signDisplay != null) options = _objectSpread({}, options, {\n        signDisplay: this.options.signDisplay\n      });\n      if (!$488c6ddbf4ef74c2$var$supportsUnit && this.options.style === 'unit') options = _objectSpread({}, options, {\n        style: 'unit',\n        unit: this.options.unit,\n        unitDisplay: this.options.unitDisplay\n      });\n      return options;\n    }\n  }]);\n\n  function $488c6ddbf4ef74c2$export$cc77c4ff7e8673c5(locale) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, $488c6ddbf4ef74c2$export$cc77c4ff7e8673c5);\n\n    this.numberFormatter = $488c6ddbf4ef74c2$var$getCachedNumberFormatter(locale, options);\n    this.options = options;\n  }\n\n  return $488c6ddbf4ef74c2$export$cc77c4ff7e8673c5;\n}();\n\nfunction $488c6ddbf4ef74c2$var$getCachedNumberFormatter(locale) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var _options = options,\n      numberingSystem = _options.numberingSystem;\n  if (numberingSystem && locale.indexOf('-u-nu-') === -1) locale = \"\".concat(locale, \"-u-nu-\").concat(numberingSystem);\n\n  if (options.style === 'unit' && !$488c6ddbf4ef74c2$var$supportsUnit) {\n    var ref;\n    var _options2 = options,\n        unit = _options2.unit,\n        _options2$unitDisplay = _options2.unitDisplay,\n        unitDisplay = _options2$unitDisplay === void 0 ? 'short' : _options2$unitDisplay;\n    if (!unit) throw new Error('unit option must be provided with style: \"unit\"');\n    if (!((ref = $488c6ddbf4ef74c2$var$UNITS[unit]) === null || ref === void 0 ? void 0 : ref[unitDisplay])) throw new Error(\"Unsupported unit \".concat(unit, \" with unitDisplay = \").concat(unitDisplay));\n    options = _objectSpread({}, options, {\n      style: 'decimal'\n    });\n  }\n\n  var cacheKey = locale + (options ? Object.entries(options).sort(function (a, b) {\n    return a[0] < b[0] ? -1 : 1;\n  }).join() : '');\n  if ($488c6ddbf4ef74c2$var$formatterCache.has(cacheKey)) return $488c6ddbf4ef74c2$var$formatterCache.get(cacheKey);\n  var numberFormatter = new Intl.NumberFormat(locale, options);\n  $488c6ddbf4ef74c2$var$formatterCache.set(cacheKey, numberFormatter);\n  return numberFormatter;\n}\n\nfunction $488c6ddbf4ef74c2$export$711b50b3c525e0f2(numberFormat, signDisplay, num) {\n  if (signDisplay === 'auto') return numberFormat.format(num);else if (signDisplay === 'never') return numberFormat.format(Math.abs(num));else {\n    var needsPositiveSign = false;\n    if (signDisplay === 'always') needsPositiveSign = num > 0 || Object.is(num, 0);else if (signDisplay === 'exceptZero') {\n      if (Object.is(num, -0) || Object.is(num, 0)) num = Math.abs(num);else needsPositiveSign = num > 0;\n    }\n\n    if (needsPositiveSign) {\n      var negative = numberFormat.format(-num);\n      var noSign = numberFormat.format(num); // ignore RTL/LTR marker character\n\n      var minus = negative.replace(noSign, '').replace(/\\u200e|\\u061C/, '');\n      if (_toConsumableArray(minus).length !== 1) console.warn('@react-aria/i18n polyfill for NumberFormat signDisplay: Unsupported case');\n      var positive = negative.replace(noSign, '!!!').replace(minus, '+').replace('!!!', noSign);\n      return positive;\n    } else return numberFormat.format(num);\n  }\n}\n\nvar $6c7bd7858deea686$var$CURRENCY_SIGN_REGEX = new RegExp('^.*\\\\(.*\\\\).*$');\nvar $6c7bd7858deea686$var$NUMBERING_SYSTEMS = ['latn', 'arab', 'hanidec'];\n\nvar $6c7bd7858deea686$export$cd11ab140839f11d = /*#__PURE__*/function () {\n  _createClass($6c7bd7858deea686$export$cd11ab140839f11d, [{\n    key: \"parse\",\n\n    /**\n    * Parses the given string to a number. Returns NaN if a valid number could not be parsed.\n    */\n    value: function parse(value) {\n      return $6c7bd7858deea686$var$getNumberParserImpl(this.locale, this.options, value).parse(value);\n    }\n    /**\n    * Returns whether the given string could potentially be a valid number. This should be used to\n    * validate user input as the user types. If a `minValue` or `maxValue` is provided, the validity\n    * of the minus/plus sign characters can be checked.\n    */\n\n  }, {\n    key: \"isValidPartialNumber\",\n    value: function isValidPartialNumber(value, minValue, maxValue) {\n      return $6c7bd7858deea686$var$getNumberParserImpl(this.locale, this.options, value).isValidPartialNumber(value, minValue, maxValue);\n    }\n    /**\n    * Returns a numbering system for which the given string is valid in the current locale.\n    * If no numbering system could be detected, the default numbering system for the current\n    * locale is returned.\n    */\n\n  }, {\n    key: \"getNumberingSystem\",\n    value: function getNumberingSystem(value) {\n      return $6c7bd7858deea686$var$getNumberParserImpl(this.locale, this.options, value).options.numberingSystem;\n    }\n  }]);\n\n  function $6c7bd7858deea686$export$cd11ab140839f11d(locale) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, $6c7bd7858deea686$export$cd11ab140839f11d);\n\n    this.locale = locale;\n    this.options = options;\n  }\n\n  return $6c7bd7858deea686$export$cd11ab140839f11d;\n}();\n\nvar $6c7bd7858deea686$var$numberParserCache = new Map();\n\nfunction $6c7bd7858deea686$var$getNumberParserImpl(locale, options, value) {\n  // First try the default numbering system for the provided locale\n  var defaultParser = $6c7bd7858deea686$var$getCachedNumberParser(locale, options); // If that doesn't match, and the locale doesn't include a hard coded numbering system,\n  // try each of the other supported numbering systems until we find one that matches.\n\n  if (!locale.includes('-nu-') && !defaultParser.isValidPartialNumber(value)) {\n    var _iterator = _createForOfIteratorHelper($6c7bd7858deea686$var$NUMBERING_SYSTEMS),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var numberingSystem = _step.value;\n\n        if (numberingSystem !== defaultParser.options.numberingSystem) {\n          var parser = $6c7bd7858deea686$var$getCachedNumberParser(locale + (locale.includes('-u-') ? '-nu-' : '-u-nu-') + numberingSystem, options);\n          if (parser.isValidPartialNumber(value)) return parser;\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n\n  return defaultParser;\n}\n\nfunction $6c7bd7858deea686$var$getCachedNumberParser(locale, options) {\n  var cacheKey = locale + (options ? Object.entries(options).sort(function (a, b) {\n    return a[0] < b[0] ? -1 : 1;\n  }).join() : '');\n  var parser = $6c7bd7858deea686$var$numberParserCache.get(cacheKey);\n\n  if (!parser) {\n    parser = new $6c7bd7858deea686$var$NumberParserImpl(locale, options);\n    $6c7bd7858deea686$var$numberParserCache.set(cacheKey, parser);\n  }\n\n  return parser;\n} // The actual number parser implementation. Instances of this class are cached\n// based on the locale, options, and detected numbering system.\n\n\nvar $6c7bd7858deea686$var$NumberParserImpl = /*#__PURE__*/function () {\n  _createClass($6c7bd7858deea686$var$NumberParserImpl, [{\n    key: \"parse\",\n    value: function parse(value) {\n      // to parse the number, we need to remove anything that isn't actually part of the number, for example we want '-10.40' not '-10.40 USD'\n      var fullySanitizedValue = this.sanitize(value); // Remove group characters, and replace decimal points and numerals with ASCII values.\n\n      fullySanitizedValue = $6c7bd7858deea686$var$replaceAll(fullySanitizedValue, this.symbols.group, '').replace(this.symbols.decimal, '.').replace(this.symbols.minusSign, '-').replace(this.symbols.numeral, this.symbols.index);\n      var newValue = fullySanitizedValue ? +fullySanitizedValue : NaN;\n      if (isNaN(newValue)) return NaN; // accounting will always be stripped to a positive number, so if it's accounting and has a () around everything, then we need to make it negative again\n\n      if (this.options.currencySign === 'accounting' && $6c7bd7858deea686$var$CURRENCY_SIGN_REGEX.test(value)) newValue = -1 * newValue; // when reading the number, if it's a percent, then it should be interpreted as being divided by 100\n\n      if (this.options.style === 'percent') {\n        newValue /= 100;\n\n        var _maximumFractionDigits; // after dividing to get the percent value, javascript may get .0210999999 instead of .0211, so fix the number of fraction digits\n\n\n        newValue = +newValue.toFixed(((_maximumFractionDigits = this.options.maximumFractionDigits) !== null && _maximumFractionDigits !== void 0 ? _maximumFractionDigits : 0) + 2);\n      }\n\n      return newValue;\n    }\n  }, {\n    key: \"sanitize\",\n    value: function sanitize(value) {\n      // Remove literals and whitespace, which are allowed anywhere in the string\n      value = value.replace(this.symbols.literals, ''); // Replace the ASCII minus sign with the minus sign used in the current locale\n      // so that both are allowed in case the user's keyboard doesn't have the locale's minus sign.\n\n      value = value.replace('-', this.symbols.minusSign); // In arab numeral system, their decimal character is 1643, but most keyboards don't type that\n      // instead they use the , (44) character or apparently the (1548) character.\n\n      if (this.options.numberingSystem === 'arab') {\n        value = value.replace(',', this.symbols.decimal);\n        value = value.replace(String.fromCharCode(1548), this.symbols.decimal);\n        value = $6c7bd7858deea686$var$replaceAll(value, '.', this.symbols.group);\n      } // fr-FR group character is char code 8239, but that's not a key on the french keyboard,\n      // so allow 'period' as a group char and replace it with a space\n\n\n      if (this.options.locale === 'fr-FR') value = $6c7bd7858deea686$var$replaceAll(value, '.', String.fromCharCode(8239));\n      return value;\n    }\n  }, {\n    key: \"isValidPartialNumber\",\n    value: function isValidPartialNumber(value) {\n      var minValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -Infinity;\n      var maxValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Infinity;\n      value = this.sanitize(value); // Remove minus or plus sign, which must be at the start of the string.\n\n      if (value.startsWith(this.symbols.minusSign) && minValue < 0) value = value.slice(this.symbols.minusSign.length);else if (this.symbols.plusSign && value.startsWith(this.symbols.plusSign) && maxValue > 0) value = value.slice(this.symbols.plusSign.length); // Numbers cannot start with a group separator\n\n      if (value.startsWith(this.symbols.group)) return false; // Remove numerals, groups, and decimals\n\n      value = $6c7bd7858deea686$var$replaceAll(value, this.symbols.group, '').replace(this.symbols.numeral, '').replace(this.symbols.decimal, ''); // The number is valid if there are no remaining characters\n\n      return value.length === 0;\n    }\n  }]);\n\n  function $6c7bd7858deea686$var$NumberParserImpl(locale) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, $6c7bd7858deea686$var$NumberParserImpl);\n\n    this.formatter = new Intl.NumberFormat(locale, options);\n    this.options = this.formatter.resolvedOptions();\n    this.symbols = $6c7bd7858deea686$var$getSymbols(this.formatter, this.options, options);\n  }\n\n  return $6c7bd7858deea686$var$NumberParserImpl;\n}();\n\nvar $6c7bd7858deea686$var$nonLiteralParts = new Set(['decimal', 'fraction', 'integer', 'minusSign', 'plusSign', 'group']);\n\nfunction $6c7bd7858deea686$var$getSymbols(formatter, intlOptions, originalOptions) {\n  var ref, ref1, ref2, ref3; // Note: some locale's don't add a group symbol until there is a ten thousands place\n\n  var allParts = formatter.formatToParts(-10000.111);\n  var posAllParts = formatter.formatToParts(10000.111);\n  var singularParts = formatter.formatToParts(1);\n  var ref4;\n  var minusSign = (ref4 = (ref = allParts.find(function (p) {\n    return p.type === 'minusSign';\n  })) === null || ref === void 0 ? void 0 : ref.value) !== null && ref4 !== void 0 ? ref4 : '-';\n  var plusSign = (ref1 = posAllParts.find(function (p) {\n    return p.type === 'plusSign';\n  })) === null || ref1 === void 0 ? void 0 : ref1.value; // Safari does not support the signDisplay option, but our number parser polyfills it.\n  // If no plus sign was returned, but the original options contained signDisplay, default to the '+' character.\n  // @ts-ignore\n\n  if (!plusSign && ((originalOptions === null || originalOptions === void 0 ? void 0 : originalOptions.signDisplay) === 'exceptZero' || (originalOptions === null || originalOptions === void 0 ? void 0 : originalOptions.signDisplay) === 'always')) plusSign = '+';\n  var decimal = (ref2 = allParts.find(function (p) {\n    return p.type === 'decimal';\n  })) === null || ref2 === void 0 ? void 0 : ref2.value;\n  var group = (ref3 = allParts.find(function (p) {\n    return p.type === 'group';\n  })) === null || ref3 === void 0 ? void 0 : ref3.value; // this set is also for a regex, it's all literals that might be in the string we want to eventually parse that\n  // don't contribute to the numerical value\n\n  var pluralLiterals = allParts.filter(function (p) {\n    return !$6c7bd7858deea686$var$nonLiteralParts.has(p.type);\n  }).map(function (p) {\n    return $6c7bd7858deea686$var$escapeRegex(p.value);\n  });\n  var singularLiterals = singularParts.filter(function (p) {\n    return !$6c7bd7858deea686$var$nonLiteralParts.has(p.type);\n  }).map(function (p) {\n    return $6c7bd7858deea686$var$escapeRegex(p.value);\n  });\n\n  var sortedLiterals = _toConsumableArray(new Set([].concat(_toConsumableArray(singularLiterals), _toConsumableArray(pluralLiterals)))).sort(function (a, b) {\n    return b.length - a.length;\n  });\n\n  var literals = sortedLiterals.length === 0 ? new RegExp('[\\\\p{White_Space}]', 'gu') : new RegExp(\"\".concat(sortedLiterals.join('|'), \"|[\\\\p{White_Space}]\"), 'gu'); // These are for replacing non-latn characters with the latn equivalent\n\n  var numerals = _toConsumableArray(new Intl.NumberFormat(intlOptions.locale, {\n    useGrouping: false\n  }).format(9876543210)).reverse();\n\n  var indexes = new Map(numerals.map(function (d, i) {\n    return [d, i];\n  }));\n  var numeral = new RegExp(\"[\".concat(numerals.join(''), \"]\"), 'g');\n\n  var index = function index(d) {\n    return String(indexes.get(d));\n  };\n\n  return {\n    minusSign: minusSign,\n    plusSign: plusSign,\n    decimal: decimal,\n    group: group,\n    literals: literals,\n    numeral: numeral,\n    index: index\n  };\n}\n\nfunction $6c7bd7858deea686$var$replaceAll(str, find, replace) {\n  // @ts-ignore\n  if (str.replaceAll) // @ts-ignore\n    return str.replaceAll(find, replace);\n  return str.split(find).join(replace);\n}\n\nfunction $6c7bd7858deea686$var$escapeRegex(string) {\n  return string.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n}\n\nexport { $488c6ddbf4ef74c2$export$cc77c4ff7e8673c5 as NumberFormatter, $6c7bd7858deea686$export$cd11ab140839f11d as NumberParser };","map":null,"metadata":{},"sourceType":"module"}