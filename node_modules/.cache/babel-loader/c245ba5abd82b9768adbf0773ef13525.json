{"ast":null,"code":"import _objectSpread from \"/Users/s.gollapalli/Desktop/project/b20-master-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { useEffect as $cKEhs$useEffect } from \"react\";\nimport { useToggle as $cKEhs$useToggle } from \"@react-aria/toggle\";\nimport { filterDOMProps as $cKEhs$filterDOMProps, mergeProps as $cKEhs$mergeProps } from \"@react-aria/utils\";\nimport { useLabel as $cKEhs$useLabel } from \"@react-aria/label\";\nimport { useToggleState as $cKEhs$useToggleState } from \"@react-stately/toggle\";\n\nfunction $406796ff087fe49b$export$e375f10ce42261c5(props, state, inputRef) {\n  var _$cKEhs$useToggle = $cKEhs$useToggle(props, state, inputRef),\n      inputProps = _$cKEhs$useToggle.inputProps;\n\n  var isSelected = state.isSelected;\n  var isIndeterminate = props.isIndeterminate;\n  $cKEhs$useEffect(function () {\n    // indeterminate is a property, but it can only be set via javascript\n    // https://css-tricks.com/indeterminate-checkboxes/\n    if (inputRef.current) inputRef.current.indeterminate = isIndeterminate;\n  });\n  return {\n    inputProps: _objectSpread({}, inputProps, {\n      checked: isSelected,\n      'aria-checked': isIndeterminate ? 'mixed' : isSelected\n    })\n  };\n}\n\nvar $1ae600c947479353$export$31440636951aa68c = new WeakMap();\n\nfunction $1e9fce0cfacc738b$export$49ff6f28c54f1cbe(props, state) {\n  var isDisabled = props.isDisabled,\n      name = props.name;\n\n  var _$cKEhs$useLabel = $cKEhs$useLabel(_objectSpread({}, props, {\n    // Checkbox group is not an HTML input element so it\n    // shouldn't be labeled by a <label> element.\n    labelElementType: 'span'\n  })),\n      labelProps = _$cKEhs$useLabel.labelProps,\n      fieldProps = _$cKEhs$useLabel.fieldProps;\n\n  var domProps = $cKEhs$filterDOMProps(props, {\n    labelable: true\n  }); // Pass name prop from group to all items by attaching to the state.\n\n  $1ae600c947479353$export$31440636951aa68c.set(state, name);\n  return {\n    groupProps: $cKEhs$mergeProps(domProps, _objectSpread({\n      role: 'group',\n      'aria-disabled': isDisabled || undefined\n    }, fieldProps)),\n    labelProps: labelProps\n  };\n}\n\nfunction $fba3e38d5ca8983f$export$353b32fc6898d37d(props, state, inputRef) {\n  var toggleState = $cKEhs$useToggleState({\n    isReadOnly: props.isReadOnly || state.isReadOnly,\n    isSelected: state.isSelected(props.value),\n    onChange: function onChange(isSelected) {\n      if (isSelected) state.addValue(props.value);else state.removeValue(props.value);\n      if (props.onChange) props.onChange(isSelected);\n    }\n  });\n\n  var _$406796ff087fe49b$ex = $406796ff087fe49b$export$e375f10ce42261c5(_objectSpread({}, props, {\n    isReadOnly: props.isReadOnly || state.isReadOnly,\n    isDisabled: props.isDisabled || state.isDisabled,\n    name: props.name || $1ae600c947479353$export$31440636951aa68c.get(state)\n  }), toggleState, inputRef),\n      inputProps = _$406796ff087fe49b$ex.inputProps;\n\n  return {\n    inputProps: inputProps\n  };\n}\n\nexport { $406796ff087fe49b$export$e375f10ce42261c5 as useCheckbox, $1e9fce0cfacc738b$export$49ff6f28c54f1cbe as useCheckboxGroup, $fba3e38d5ca8983f$export$353b32fc6898d37d as useCheckboxGroupItem };","map":null,"metadata":{},"sourceType":"module"}