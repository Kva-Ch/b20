{"ast":null,"code":"import _objectSpread from \"/Users/s.gollapalli/Desktop/project/b20-master-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _objectWithoutProperties from \"/Users/s.gollapalli/Desktop/project/b20-master-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport { useId as $13Gtr$useId, filterDOMProps as $13Gtr$filterDOMProps, mergeProps as $13Gtr$mergeProps, useSlotId as $13Gtr$useSlotId } from \"@react-aria/utils\";\nimport { useHighlightSelectionDescription as $13Gtr$useHighlightSelectionDescription, useGridSelectionAnnouncement as $13Gtr$useGridSelectionAnnouncement, useGridSelectionCheckbox as $13Gtr$useGridSelectionCheckbox } from \"@react-aria/grid\";\nimport { useSelectableList as $13Gtr$useSelectableList, useSelectableItem as $13Gtr$useSelectableItem } from \"@react-aria/selection\";\nimport { focusSafely as $13Gtr$focusSafely, getFocusableTreeWalker as $13Gtr$getFocusableTreeWalker } from \"@react-aria/focus\";\nimport { isFocusVisible as $13Gtr$isFocusVisible } from \"@react-aria/interactions\";\nimport { useLocale as $13Gtr$useLocale } from \"@react-aria/i18n\";\nvar $ce9b18daab526bbd$export$5b9bb410392e3991 = new WeakMap();\n\nfunction $ce9b18daab526bbd$export$f45c25170b9a99c2(state, key) {\n  var _$ce9b18daab526bbd$ex = $ce9b18daab526bbd$export$5b9bb410392e3991.get(state),\n      id = _$ce9b18daab526bbd$ex.id;\n\n  if (!id) throw new Error('Unknown list');\n  return \"\".concat(id, \"-\").concat($ce9b18daab526bbd$export$e0c709538cb8ae18(key));\n}\n\nfunction $ce9b18daab526bbd$export$e0c709538cb8ae18(key) {\n  if (typeof key === 'string') return key.replace(/\\s*/g, '');\n  return '' + key;\n}\n\nfunction $f47efb0c3a859cf2$export$664f9155035607eb(props, state, ref) {\n  var isVirtualized = props.isVirtualized,\n      keyboardDelegate = props.keyboardDelegate,\n      onAction = props.onAction;\n  if (!props['aria-label'] && !props['aria-labelledby']) console.warn('An aria-label or aria-labelledby prop is required for accessibility.');\n\n  var _$13Gtr$useSelectable = $13Gtr$useSelectableList({\n    selectionManager: state.selectionManager,\n    collection: state.collection,\n    disabledKeys: state.disabledKeys,\n    ref: ref,\n    keyboardDelegate: keyboardDelegate,\n    isVirtualized: isVirtualized,\n    selectOnFocus: state.selectionManager.selectionBehavior === 'replace'\n  }),\n      listProps = _$13Gtr$useSelectable.listProps;\n\n  var id = $13Gtr$useId();\n  $ce9b18daab526bbd$export$5b9bb410392e3991.set(state, {\n    id: id,\n    onAction: onAction\n  });\n  var descriptionProps = $13Gtr$useHighlightSelectionDescription({\n    selectionManager: state.selectionManager,\n    hasItemActions: !!onAction\n  });\n  var domProps = $13Gtr$filterDOMProps(props, {\n    labelable: true\n  });\n  var gridProps = $13Gtr$mergeProps(domProps, {\n    role: 'grid',\n    id: id,\n    'aria-multiselectable': state.selectionManager.selectionMode === 'multiple' ? 'true' : undefined\n  }, listProps, descriptionProps);\n\n  if (isVirtualized) {\n    gridProps['aria-rowcount'] = state.collection.size;\n    gridProps['aria-colcount'] = 1;\n  }\n\n  $13Gtr$useGridSelectionAnnouncement({}, state);\n  return {\n    gridProps: gridProps\n  };\n}\n\nfunction $4e8b0456ef72939f$export$9610e69494fadfd2(props, state, ref) {\n  // Copied from useGridCell + some modifications to make it not so grid specific\n  var node = props.node,\n      isVirtualized = props.isVirtualized,\n      shouldSelectOnPressUp = props.shouldSelectOnPressUp;\n\n  var _$13Gtr$useLocale = $13Gtr$useLocale(),\n      direction = _$13Gtr$useLocale.direction;\n\n  var _$ce9b18daab526bbd$ex2 = $ce9b18daab526bbd$export$5b9bb410392e3991.get(state),\n      onAction = _$ce9b18daab526bbd$ex2.onAction;\n\n  var descriptionId = $13Gtr$useSlotId();\n\n  var focus = function focus() {\n    // Don't shift focus to the row if the active element is a element within the row already\n    // (e.g. clicking on a row button)\n    if (!ref.current.contains(document.activeElement)) $13Gtr$focusSafely(ref.current);\n  };\n\n  var _$13Gtr$useSelectable2 = $13Gtr$useSelectableItem({\n    selectionManager: state.selectionManager,\n    key: node.key,\n    ref: ref,\n    isVirtualized: isVirtualized,\n    shouldSelectOnPressUp: shouldSelectOnPressUp,\n    onAction: onAction ? function () {\n      return onAction(node.key);\n    } : undefined,\n    focus: focus\n  }),\n      itemProps = _$13Gtr$useSelectable2.itemProps,\n      itemStates = _objectWithoutProperties(_$13Gtr$useSelectable2, [\"itemProps\"]);\n\n  var onKeyDown = function onKeyDown(e) {\n    if (!e.currentTarget.contains(e.target)) return;\n    var walker = $13Gtr$getFocusableTreeWalker(ref.current);\n    walker.currentNode = document.activeElement;\n\n    switch (e.key) {\n      case 'ArrowLeft':\n        {\n          // Find the next focusable element within the row.\n          var focusable = direction === 'rtl' ? walker.nextNode() : walker.previousNode();\n\n          if (focusable) {\n            e.preventDefault();\n            e.stopPropagation();\n            $13Gtr$focusSafely(focusable);\n          } else {\n            // If there is no next focusable child, then return focus back to the row\n            e.preventDefault();\n            e.stopPropagation();\n            if (direction === 'rtl') $13Gtr$focusSafely(ref.current);else {\n              walker.currentNode = ref.current;\n              var lastElement = $4e8b0456ef72939f$var$last(walker);\n              if (lastElement) $13Gtr$focusSafely(lastElement);\n            }\n          }\n\n          break;\n        }\n\n      case 'ArrowRight':\n        {\n          var _focusable = direction === 'rtl' ? walker.previousNode() : walker.nextNode();\n\n          if (_focusable) {\n            e.preventDefault();\n            e.stopPropagation();\n            $13Gtr$focusSafely(_focusable);\n          } else {\n            e.preventDefault();\n            e.stopPropagation();\n            if (direction === 'ltr') $13Gtr$focusSafely(ref.current);else {\n              walker.currentNode = ref.current;\n\n              var _lastElement = $4e8b0456ef72939f$var$last(walker);\n\n              if (_lastElement) $13Gtr$focusSafely(_lastElement);\n            }\n          }\n\n          break;\n        }\n\n      case 'ArrowUp':\n      case 'ArrowDown':\n        // Prevent this event from reaching row children, e.g. menu buttons. We want arrow keys to navigate\n        // to the row above/below instead. We need to re-dispatch the event from a higher parent so it still\n        // bubbles and gets handled by useSelectableCollection.\n        if (!e.altKey && ref.current.contains(e.target)) {\n          e.stopPropagation();\n          e.preventDefault();\n          ref.current.parentElement.dispatchEvent(new KeyboardEvent(e.nativeEvent.type, e.nativeEvent));\n        }\n\n        break;\n    }\n  };\n\n  var onFocus = function onFocus(e) {\n    if (e.target !== ref.current) {\n      // useSelectableItem only handles setting the focused key when\n      // the focused element is the row itself. We also want to\n      // set the focused key when a child element receives focus.\n      // If focus is currently visible (e.g. the user is navigating with the keyboard),\n      // then skip this. We want to restore focus to the previously focused row\n      // in that case since the list should act like a single tab stop.\n      if (!$13Gtr$isFocusVisible()) state.selectionManager.setFocusedKey(node.key);\n      return;\n    }\n  };\n\n  var rowProps = $13Gtr$mergeProps(itemProps, {\n    role: 'row',\n    onKeyDownCapture: onKeyDown,\n    onFocus: onFocus,\n    'aria-label': node.textValue || undefined,\n    'aria-selected': state.selectionManager.canSelectItem(node.key) ? state.selectionManager.isSelected(node.key) : undefined,\n    'aria-disabled': state.selectionManager.isDisabled(node.key) || undefined,\n    'aria-labelledby': descriptionId && node.textValue ? \"\".concat($ce9b18daab526bbd$export$f45c25170b9a99c2(state, node.key), \" \").concat(descriptionId) : undefined,\n    id: $ce9b18daab526bbd$export$f45c25170b9a99c2(state, node.key)\n  });\n  if (isVirtualized) rowProps['aria-rowindex'] = node.index + 1;\n  var gridCellProps = {\n    role: 'gridcell',\n    'aria-colindex': 1\n  };\n  return _objectSpread({\n    rowProps: rowProps,\n    gridCellProps: gridCellProps,\n    descriptionProps: {\n      id: descriptionId\n    }\n  }, itemStates);\n}\n\nfunction $4e8b0456ef72939f$var$last(walker) {\n  var next;\n  var last;\n\n  do {\n    last = walker.lastChild();\n    if (last) next = last;\n  } while (last);\n\n  return next;\n}\n\nfunction $e52ffc04a4adbd52$export$e29f2573fabbf7b9(props, state) {\n  var key = props.key;\n\n  var _$13Gtr$useGridSelect = $13Gtr$useGridSelectionCheckbox(props, state),\n      checkboxProps = _$13Gtr$useGridSelect.checkboxProps;\n\n  return {\n    checkboxProps: _objectSpread({}, checkboxProps, {\n      'aria-labelledby': \"\".concat(checkboxProps.id, \" \").concat($ce9b18daab526bbd$export$f45c25170b9a99c2(state, key))\n    })\n  };\n}\n\nexport { $f47efb0c3a859cf2$export$664f9155035607eb as useGridList, $4e8b0456ef72939f$export$9610e69494fadfd2 as useGridListItem, $e52ffc04a4adbd52$export$e29f2573fabbf7b9 as useGridListSelectionCheckbox };","map":null,"metadata":{},"sourceType":"module"}