{"ast":null,"code":"import _objectSpread from \"/Users/s.gollapalli/Desktop/project/b20-master-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { filterDOMProps as $kgVYN$filterDOMProps, mergeProps as $kgVYN$mergeProps, useId as $kgVYN$useId } from \"@react-aria/utils\";\nimport { useHover as $kgVYN$useHover, getInteractionModality as $kgVYN$getInteractionModality, isFocusVisible as $kgVYN$isFocusVisible, usePress as $kgVYN$usePress } from \"@react-aria/interactions\";\nimport { useRef as $kgVYN$useRef, useEffect as $kgVYN$useEffect } from \"react\";\nimport { useFocusable as $kgVYN$useFocusable } from \"@react-aria/focus\";\n\nfunction $326e436e94273fe1$export$1c4b08e0eca38426(props, state) {\n  var domProps = $kgVYN$filterDOMProps(props, {\n    labelable: true\n  });\n\n  var _$kgVYN$useHover = $kgVYN$useHover({\n    onHoverStart: function onHoverStart() {\n      return state === null || state === void 0 ? void 0 : state.open(true);\n    },\n    onHoverEnd: function onHoverEnd() {\n      return state === null || state === void 0 ? void 0 : state.close();\n    }\n  }),\n      hoverProps = _$kgVYN$useHover.hoverProps;\n\n  return {\n    tooltipProps: $kgVYN$mergeProps(domProps, hoverProps, {\n      role: 'tooltip'\n    })\n  };\n}\n\nfunction $4e1b34546679e357$export$a6da6c504e4bba8b(props, state, ref) {\n  var isDisabled = props.isDisabled,\n      trigger = props.trigger;\n  var tooltipId = $kgVYN$useId();\n  var isHovered = $kgVYN$useRef(false);\n  var isFocused = $kgVYN$useRef(false);\n\n  var handleShow = function handleShow() {\n    if (isHovered.current || isFocused.current) state.open(isFocused.current);\n  };\n\n  var handleHide = function handleHide(immediate) {\n    if (!isHovered.current && !isFocused.current) state.close(immediate);\n  };\n\n  $kgVYN$useEffect(function () {\n    var onKeyDown = function onKeyDown(e) {\n      if (ref && ref.current) // Escape after clicking something can give it keyboard focus\n        // dismiss tooltip on esc key press\n        {\n          if (e.key === 'Escape') state.close(true);\n        }\n    };\n\n    if (state.isOpen) {\n      document.addEventListener('keydown', onKeyDown, true);\n      return function () {\n        document.removeEventListener('keydown', onKeyDown, true);\n      };\n    }\n  }, [ref, state]);\n\n  var onHoverStart = function onHoverStart() {\n    if (trigger === 'focus') return; // In chrome, if you hover a trigger, then another element obscures it, due to keyboard\n    // interactions for example, hover will end. When hover is restored after that element disappears,\n    // focus moves on for example, then the tooltip will reopen. We check the modality to know if the hover\n    // is the result of moving the mouse.\n\n    if ($kgVYN$getInteractionModality() === 'pointer') isHovered.current = true;else isHovered.current = false;\n    handleShow();\n  };\n\n  var onHoverEnd = function onHoverEnd() {\n    if (trigger === 'focus') return; // no matter how the trigger is left, we should close the tooltip\n\n    isFocused.current = false;\n    isHovered.current = false;\n    handleHide();\n  };\n\n  var onPressStart = function onPressStart() {\n    // no matter how the trigger is pressed, we should close the tooltip\n    isFocused.current = false;\n    isHovered.current = false;\n    handleHide(true);\n  };\n\n  var onFocus = function onFocus() {\n    var isVisible = $kgVYN$isFocusVisible();\n\n    if (isVisible) {\n      isFocused.current = true;\n      handleShow();\n    }\n  };\n\n  var onBlur = function onBlur() {\n    isFocused.current = false;\n    isHovered.current = false;\n    handleHide(true);\n  };\n\n  var _$kgVYN$useHover2 = $kgVYN$useHover({\n    isDisabled: isDisabled,\n    onHoverStart: onHoverStart,\n    onHoverEnd: onHoverEnd\n  }),\n      hoverProps = _$kgVYN$useHover2.hoverProps;\n\n  var _$kgVYN$usePress = $kgVYN$usePress({\n    onPressStart: onPressStart\n  }),\n      pressProps = _$kgVYN$usePress.pressProps;\n\n  var _$kgVYN$useFocusable = $kgVYN$useFocusable({\n    isDisabled: isDisabled,\n    onFocus: onFocus,\n    onBlur: onBlur\n  }, ref),\n      focusableProps = _$kgVYN$useFocusable.focusableProps;\n\n  return {\n    triggerProps: _objectSpread({\n      'aria-describedby': state.isOpen ? tooltipId : undefined\n    }, $kgVYN$mergeProps(focusableProps, hoverProps, pressProps)),\n    tooltipProps: {\n      id: tooltipId\n    }\n  };\n}\n\nexport { $326e436e94273fe1$export$1c4b08e0eca38426 as useTooltip, $4e1b34546679e357$export$a6da6c504e4bba8b as useTooltipTrigger };","map":null,"metadata":{},"sourceType":"module"}