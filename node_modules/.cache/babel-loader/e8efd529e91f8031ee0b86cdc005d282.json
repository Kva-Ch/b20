{"ast":null,"code":"var _jsxFileName = \"/Users/k.chaganti/Desktop/b20/b20/src/screens/Test.jsx\",\n    _s = $RefreshSig$();\n\nimport { BrowserRouter as Router, Routes, Route, Link } from 'react-router-dom';\nimport React, { useState, useEffect } from \"react\";\nimport ReactDOM from 'react-dom';\nimport ReactPaginate from 'react-paginate';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction test(props) {\n  _s();\n\n  const items = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14];\n\n  function Items(_ref) {\n    let {\n      currentItems\n    } = _ref;\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: currentItems && currentItems.map(item => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"Item #\", item]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 16,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 13\n      }, this))\n    }, void 0, false);\n  }\n\n  let itemsPerPage = 10;\n  const [currentItems, setCurrentItems] = useState(null);\n  const [pageCount, setPageCount] = useState(0); // Here we use item offsets; we could also use page offsets\n  // following the API or data you're working with.\n\n  const [itemOffset, setItemOffset] = useState(0);\n  useEffect(() => {\n    // Fetch items from another resources.\n    const endOffset = itemOffset + itemsPerPage;\n    console.log(`Loading items from ${itemOffset} to ${endOffset}`);\n    setCurrentItems(items.slice(itemOffset, endOffset));\n    setPageCount(Math.ceil(items.length / itemsPerPage));\n  }, [itemOffset, itemsPerPage]); // Invoke when user click to request another page.\n\n  const handlePageClick = event => {\n    const newOffset = event.selected * itemsPerPage % items.length;\n    console.log(`User requested page number ${event.selected}, which is offset ${newOffset}`);\n    setItemOffset(newOffset);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Items, {\n      currentItems: currentItems\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(ReactPaginate, {\n      breakLabel: \"...\",\n      nextLabel: \"next >\",\n      onPageChange: handlePageClick,\n      pageRangeDisplayed: 5,\n      pageCount: pageCount,\n      previousLabel: \"< previous\",\n      renderOnZeroPageCount: null\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 11\n  }, this);\n}\n\n_s(test, \"HTeX8cSP+G2jiDQZoJcFFLxPhRM=\");\n\nexport default Test;","map":{"version":3,"names":["BrowserRouter","Router","Routes","Route","Link","React","useState","useEffect","ReactDOM","ReactPaginate","test","props","items","Items","currentItems","map","item","itemsPerPage","setCurrentItems","pageCount","setPageCount","itemOffset","setItemOffset","endOffset","console","log","slice","Math","ceil","length","handlePageClick","event","newOffset","selected","Test"],"sources":["/Users/k.chaganti/Desktop/b20/b20/src/screens/Test.jsx"],"sourcesContent":["import {BrowserRouter as Router, Routes, Route, Link} from 'react-router-dom';\nimport React, {useState, useEffect} from \"react\";\nimport ReactDOM from 'react-dom';\nimport ReactPaginate from 'react-paginate';\n\nfunction test(props) {\n\n  const items = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14];\n\n  function Items({ currentItems }) {\n    return (\n      <>\n        {currentItems &&\n          currentItems.map((item) => (\n            <div>\n              <h3>Item #{item}</h3>\n            </div>\n          ))}\n      </>\n    );\n  }\n\n  let itemsPerPage = 10;\n  const [currentItems, setCurrentItems] = useState(null);\n    const [pageCount, setPageCount] = useState(0);\n    // Here we use item offsets; we could also use page offsets\n    // following the API or data you're working with.\n    const [itemOffset, setItemOffset] = useState(0);\n\n    useEffect(() => {\n      // Fetch items from another resources.\n      const endOffset = itemOffset + itemsPerPage;\n      console.log(`Loading items from ${itemOffset} to ${endOffset}`);\n      setCurrentItems(items.slice(itemOffset, endOffset));\n      setPageCount(Math.ceil(items.length / itemsPerPage));\n    }, [itemOffset, itemsPerPage]);\n\n    // Invoke when user click to request another page.\n    const handlePageClick = (event) => {\n      const newOffset = (event.selected * itemsPerPage) % items.length;\n      console.log(\n        `User requested page number ${event.selected}, which is offset ${newOffset}`\n      );\n      setItemOffset(newOffset);\n    };\n\n\n  return (<div>\n    <Items currentItems={currentItems} />\n        <ReactPaginate\n          breakLabel=\"...\"\n          nextLabel=\"next >\"\n          onPageChange={handlePageClick}\n          pageRangeDisplayed={5}\n          pageCount={pageCount}\n          previousLabel=\"< previous\"\n          renderOnZeroPageCount={null}\n        />\n  </div>);\n}\n\nexport default Test;\n"],"mappings":";;;AAAA,SAAQA,aAAa,IAAIC,MAAzB,EAAiCC,MAAjC,EAAyCC,KAAzC,EAAgDC,IAAhD,QAA2D,kBAA3D;AACA,OAAOC,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,aAAP,MAA0B,gBAA1B;;;;AAEA,SAASC,IAAT,CAAcC,KAAd,EAAqB;EAAA;;EAEnB,MAAMC,KAAK,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,EAA4B,EAA5B,EAAgC,EAAhC,EAAoC,EAApC,EAAwC,EAAxC,EAA4C,EAA5C,CAAd;;EAEA,SAASC,KAAT,OAAiC;IAAA,IAAlB;MAAEC;IAAF,CAAkB;IAC/B,oBACE;MAAA,UACGA,YAAY,IACXA,YAAY,CAACC,GAAb,CAAkBC,IAAD,iBACf;QAAA,uBACE;UAAA,qBAAWA,IAAX;QAAA;UAAA;UAAA;UAAA;QAAA;MADF;QAAA;QAAA;QAAA;MAAA,QADF;IAFJ,iBADF;EAUD;;EAED,IAAIC,YAAY,GAAG,EAAnB;EACA,MAAM,CAACH,YAAD,EAAeI,eAAf,IAAkCZ,QAAQ,CAAC,IAAD,CAAhD;EACE,MAAM,CAACa,SAAD,EAAYC,YAAZ,IAA4Bd,QAAQ,CAAC,CAAD,CAA1C,CAnBiB,CAoBjB;EACA;;EACA,MAAM,CAACe,UAAD,EAAaC,aAAb,IAA8BhB,QAAQ,CAAC,CAAD,CAA5C;EAEAC,SAAS,CAAC,MAAM;IACd;IACA,MAAMgB,SAAS,GAAGF,UAAU,GAAGJ,YAA/B;IACAO,OAAO,CAACC,GAAR,CAAa,sBAAqBJ,UAAW,OAAME,SAAU,EAA7D;IACAL,eAAe,CAACN,KAAK,CAACc,KAAN,CAAYL,UAAZ,EAAwBE,SAAxB,CAAD,CAAf;IACAH,YAAY,CAACO,IAAI,CAACC,IAAL,CAAUhB,KAAK,CAACiB,MAAN,GAAeZ,YAAzB,CAAD,CAAZ;EACD,CANQ,EAMN,CAACI,UAAD,EAAaJ,YAAb,CANM,CAAT,CAxBiB,CAgCjB;;EACA,MAAMa,eAAe,GAAIC,KAAD,IAAW;IACjC,MAAMC,SAAS,GAAID,KAAK,CAACE,QAAN,GAAiBhB,YAAlB,GAAkCL,KAAK,CAACiB,MAA1D;IACAL,OAAO,CAACC,GAAR,CACG,8BAA6BM,KAAK,CAACE,QAAS,qBAAoBD,SAAU,EAD7E;IAGAV,aAAa,CAACU,SAAD,CAAb;EACD,CAND;;EASF,oBAAQ;IAAA,wBACN,QAAC,KAAD;MAAO,YAAY,EAAElB;IAArB;MAAA;MAAA;MAAA;IAAA,QADM,eAEF,QAAC,aAAD;MACE,UAAU,EAAC,KADb;MAEE,SAAS,EAAC,QAFZ;MAGE,YAAY,EAAEgB,eAHhB;MAIE,kBAAkB,EAAE,CAJtB;MAKE,SAAS,EAAEX,SALb;MAME,aAAa,EAAC,YANhB;MAOE,qBAAqB,EAAE;IAPzB;MAAA;MAAA;MAAA;IAAA,QAFE;EAAA;IAAA;IAAA;IAAA;EAAA,QAAR;AAYD;;GAtDQT,I;;AAwDT,eAAewB,IAAf"},"metadata":{},"sourceType":"module"}